{"version":3,"file":"component---src-pages-speakers-tsx-931ce9fbca49e1fb4ffb.js","mappings":"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","sources":["webpack://jsconfjp-2023/./src/components/Breadcrumb.tsx","webpack://jsconfjp-2023/./src/components/ResponsiveBox.tsx","webpack://jsconfjp-2023/./src/components/Speaker.tsx","webpack://jsconfjp-2023/./src/components/SpeakerList.tsx","webpack://jsconfjp-2023/./src/components/Title.tsx","webpack://jsconfjp-2023/./src/pages/speakers.tsx","webpack://jsconfjp-2023/./src/util/rgba.ts"],"sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\nimport { useTranslation } from \"react-i18next\"\nimport { Link } from \"gatsby\"\n\nexport type Props = {\n  path: (string | null | { label: string; to: string })[]\n}\n\nconst Box = styled.div`\n  display: flex;\n`\nconst Text = styled.span`\n  margin-right: 0.5em;\n  font-size: 1.4rem;\n  font-weight: bold;\n  text-transform: uppercase;\n  font-family: ${({ theme }) => theme.fonts.header};\n  text-transform: uppercase;\n`\n\nexport function Breadcrumb(props: Props) {\n  const { path } = props\n  const { t } = useTranslation()\n\n  return (\n    <Box>\n      <Link to=\"/\">\n        <Text>{t(\"top\")}</Text>\n      </Link>\n      {path\n        .filter(\n          (label): label is string | { label: string; to: string } => !!label,\n        )\n        .map(label => {\n          const path = typeof label === \"string\" ? { label, to: null } : label\n          return (\n            <React.Fragment key={path.label}>\n              <Text>&gt;</Text>\n              {path.to ? (\n                <Link to={path.to}>\n                  <Text>{path.label}</Text>\n                </Link>\n              ) : (\n                <Text>{path.label}</Text>\n              )}\n            </React.Fragment>\n          )\n        })}\n    </Box>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nexport type Props = {\n  children: React.ReactNode\n}\n\nconst Box = styled.div`\n  width: 100%;\n  max-width: ${({ theme }) => theme.innerWidth};\n  padding: 2em 1em 5em;\n  margin: 0 auto;\n  box-sizing: border-box;\n`\n\nexport function ResponsiveBox(props: Props) {\n  const { children } = props\n\n  return <Box>{children}</Box>\n}\n","import React from \"react\"\nimport styled, { DefaultTheme } from \"styled-components\"\nimport { Link } from \"gatsby\"\nimport { GatsbyImage as Image, IGatsbyImageData } from \"gatsby-plugin-image\"\nimport { SpeakerType, TalkType } from \"../data/types\"\nimport { SpeakerName } from \"./EventSpeakers\"\nimport { rgba } from \"../util/rgba\"\n\nexport type AvatarType = {\n  uuid: string\n} & IGatsbyImageData\n\nexport type Props = {\n  speaker: SpeakerType\n  avatar: AvatarType\n  talk: TalkType\n}\n\nfunction box(theme: DefaultTheme) {\n  return `\n  background: ${theme.colors.base};\n  padding: .8rem;\n  max-width: 250px;\n  min-width: 120px;\n  flex-grow: 1;\n  & {\n    box-shadow: ${rgba(theme.colors.primary, 0.15)} 0px 13px 27px -5px, ${rgba(\n      theme.colors.primary,\n      0.2,\n    )} 0px 8px 16px -8px;\n  }\n  &:hover {\n    box-shadow: ${rgba(theme.colors.primary, 0.35)} 0px 13px 27px -5px, ${rgba(\n      theme.colors.primary,\n      0.5,\n    )} 0px 8px 16px -8px;\n  }\n`\n}\n\nconst LinkContainer = styled(Link)`\n  text-decoration: none;\n  color: ${({ theme }) => theme.colors.text};\n  ${({ theme }) => box(theme)}\n`\nconst DivContainer = styled.div`\n  ${({ theme }) => box(theme)}\n`\n\nconst Avatar = styled(Image)`\n  width: 100%;\n`\n\nconst Name = styled.p`\n  margin: 0.5em;\n  margin-bottom: 0.2em;\n  text-align: center;\n  font-family: ${({ theme }) => theme.fonts.text};\n  font-size: 2rem;\n  min-height: 5rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const Speaker = (props: Props) => {\n  const { talk, speaker, avatar } = props\n  if (!talk) {\n    return <>???</>\n  }\n  const { uuid } = talk\n  const { name } = speaker\n\n  const content = (\n    <>\n      <Avatar image={avatar} alt={name} loading=\"lazy\" />\n      <Name>\n        <SpeakerName speaker={speaker} />\n      </Name>\n    </>\n  )\n\n  return uuid ? (\n    <LinkContainer to={`/talk/${uuid}`}>{content}</LinkContainer>\n  ) : (\n    <DivContainer>{content}</DivContainer>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { Speaker, AvatarType } from \"./Speaker\"\nimport { SpeakerType, TalkType } from \"../data/types\"\n\nexport type Props = {\n  speakers: SpeakerType[]\n  avatars: AvatarType[]\n  talks: TalkType[]\n}\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  flex-wrap: wrap;\n  gap: 1.5em;\n`\n\nexport function SpeakerList(props: Props) {\n  const { speakers, avatars, talks } = props\n  const talkMap: { [uuid: string]: TalkType } = talks.reduce(\n    (acc, talk) => ({\n      ...acc,\n      [talk.uuid]: talk as TalkType,\n    }),\n    {},\n  )\n  const avatarMap: { [uuid: string]: AvatarType } = avatars.reduce(\n    (acc, avatar) => ({ ...acc, [avatar.uuid]: avatar }),\n    {},\n  )\n  const items = speakers\n    .filter(speaker => {\n      return speaker.presentations.length > 0\n    })\n    .map(speaker => {\n      const talk = talkMap[speaker.presentations[0]]\n      return {\n        speaker,\n        talk,\n        avatar:\n          avatarMap[speaker.uuid] ?? \"/sponsors/\" + talk.sponsorIDs[0] + \".png\",\n      }\n    })\n\n  return (\n    <Container>\n      {items.map(item => {\n        return <Speaker key={item.speaker.uuid} {...item} />\n      })}\n    </Container>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nexport type Props = {\n  children: React.ReactNode\n}\n\nconst Box = styled.h1`\n  text-align: center;\n  margin: 40px 0 60px;\n  font-size: ${({ theme }) => theme.fontSizes.title};\n  text-transform: none;\n  font-family: ${({ theme }) => theme.fonts.header};\n`\n\nexport function Title(props: Props) {\n  const { children } = props\n\n  return <Box>{children}</Box>\n}\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { Layout } from \"../components/Layout\"\nimport { SEO } from \"../components/Seo\"\nimport { Title } from \"../components/Title\"\nimport { SpeakerList } from \"../components/SpeakerList\"\nimport { ResponsiveBox } from \"../components/ResponsiveBox\"\nimport { Breadcrumb } from \"../components/Breadcrumb\"\nimport { theme } from \"../theme\"\n\nexport default function SpeakersPage() {\n  const { allSpeakersYaml, allTalksYaml, allFile } = useStaticQuery(graphql`\n    query Speakers {\n      allSpeakersYaml {\n        edges {\n          node {\n            uuid\n            name\n            nameReading\n            biography\n            biographyJa\n            presentations\n          }\n        }\n      }\n      allTalksYaml {\n        edges {\n          node {\n            uuid\n            title\n            titleJa\n            description\n            descriptionJa\n            spokenLanguage\n            slideLanguage\n            presenterName\n            presenterNameReading\n            speakerIDs\n          }\n        }\n      }\n      allFile(filter: { relativePath: { regex: \"/speakers/\" } }) {\n        nodes {\n          name\n          childImageSharp {\n            gatsbyImageData(\n              width: 524\n              height: 524\n              placeholder: BLURRED\n              layout: CONSTRAINED\n            )\n          }\n        }\n      }\n    }\n  `)\n  const { t } = useTranslation()\n  const speakers = allSpeakersYaml.edges.map(({ node }: any) => node)\n  const avatars = allFile.nodes\n    .filter((avatar: any) => avatar.childImageSharp)\n    .map((avatar: any) => ({\n      uuid: avatar.name,\n      ...avatar.childImageSharp.gatsbyImageData,\n    }))\n  const talks = allTalksYaml.edges.map(({ node }: any) => node)\n\n  return (\n    <Layout background={theme.colors.bgLight}>\n      <SEO title={t(\"speakers\")} description={t(\"speakers.description\")} />\n      <ResponsiveBox>\n        <Breadcrumb path={[t(\"speakers\")]} />\n        <Title>{t(\"speakers\")}</Title>\n        <SpeakerList speakers={speakers} avatars={avatars} talks={talks} />\n      </ResponsiveBox>\n    </Layout>\n  )\n}\n","const hexNum = (color: string, offset: number) =>\n  parseInt(color.slice(offset, offset + 2), 16)\n\nexport const rgba = (c: string, alpha: number) =>\n  `rgba(${hexNum(c, 1)}, ${hexNum(c, 3)}, ${hexNum(c, 5)}, ${alpha})`\n"],"names":["Box","styled","div","withConfig","displayName","componentId","Text","span","_ref","theme","fonts","header","Breadcrumb","props","path","t","useTranslation","React","Link","to","filter","label","map","key","innerWidth","ResponsiveBox","children","box","colors","base","rgba","primary","LinkContainer","text","_ref2","DivContainer","_ref3","Avatar","Image","Name","p","_ref4","Speaker","talk","speaker","avatar","uuid","name","content","image","alt","loading","SpeakerName","Container","SpeakerList","speakers","avatars","talks","talkMap","reduce","acc","avatarMap","items","presentations","length","_avatarMap$speaker$uu","sponsorIDs","item","Object","assign","h1","fontSizes","title","Title","SpeakersPage","allSpeakersYaml","allTalksYaml","allFile","useStaticQuery","edges","node","nodes","childImageSharp","gatsbyImageData","Layout","background","bgLight","SEO","description","hexNum","color","offset","parseInt","slice","c","alpha"],"sourceRoot":""}