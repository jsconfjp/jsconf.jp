{"version":3,"file":"component---src-pages-speakers-tsx-ba178b7af22a3c474a42.js","mappings":"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","sources":["webpack://jsconfjp-2023/./src/components/Breadcrumb.tsx","webpack://jsconfjp-2023/./src/components/ResponsiveBox.tsx","webpack://jsconfjp-2023/./src/components/Speaker.tsx","webpack://jsconfjp-2023/./src/components/SpeakerList.tsx","webpack://jsconfjp-2023/./src/components/Title.tsx","webpack://jsconfjp-2023/./src/pages/speakers.tsx"],"sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\nimport { useTranslation } from \"react-i18next\"\nimport { Link } from \"gatsby\"\n\nexport type Props = {\n  path: (string | null | { label: string; to: string })[]\n}\n\nconst Box = styled.div`\n  display: flex;\n`\nconst Text = styled.span`\n  margin-right: 0.5em;\n  font-size: 1.4rem;\n  font-weight: bold;\n  text-transform: uppercase;\n  font-family: ${({ theme }) => theme.fonts.header};\n  text-transform: uppercase;\n`\n\nexport function Breadcrumb(props: Props) {\n  const { path } = props\n  const { t } = useTranslation()\n\n  return (\n    <Box>\n      <Link to=\"/\">\n        <Text>{t(\"top\")}</Text>\n      </Link>\n      {path\n        .filter(\n          (label): label is string | { label: string; to: string } => !!label,\n        )\n        .map(label => {\n          const path = typeof label === \"string\" ? { label, to: null } : label\n          return (\n            <React.Fragment key={path.label}>\n              <Text>&gt;</Text>\n              {path.to ? (\n                <Link to={path.to}>\n                  <Text>{path.label}</Text>\n                </Link>\n              ) : (\n                <Text>{path.label}</Text>\n              )}\n            </React.Fragment>\n          )\n        })}\n    </Box>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nexport type Props = {\n  children: React.ReactNode\n}\n\nconst Box = styled.div`\n  width: 100%;\n  max-width: ${({ theme }) => theme.innerWidth};\n  padding: 2em 1em 5em;\n  margin: 0 auto;\n  box-sizing: border-box;\n`\n\nexport function ResponsiveBox(props: Props) {\n  const { children } = props\n\n  return <Box>{children}</Box>\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { Link } from \"gatsby\"\nimport { useTranslation } from \"react-i18next\"\nimport { GatsbyImage as Image, IGatsbyImageData } from \"gatsby-plugin-image\"\nimport { enOrJa } from \"../util/languages\"\nimport { SpeakerType, TalkType } from \"../data/types\"\n\nexport type AvatarType = {\n  uuid: string\n} & IGatsbyImageData\n\nexport type Props = {\n  speaker: SpeakerType\n  avatar: AvatarType\n  talk: TalkType\n}\n\nconst LinkContainer = styled(Link)`\n  text-decoration: none;\n  color: ${({ theme }) => theme.colors.text};\n`\nconst Avatar = styled(Image)`\n  width: 100%;\n  max-width: 273px;\n`\nconst Title = styled.h2`\n  margin: 0;\n  padding: 10px;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.border};\n  text-align: center;\n  font-family: ${({ theme }) => theme.fonts.text};\n  font-size: 2rem;\n  overflow-wrap: break-word;\n  word-break: break-word;\n  hyphens: auto;\n`\nconst Name = styled.p`\n  margin-bottom: 0;\n  text-align: center;\n  font-family: ${({ theme }) => theme.fonts.text};\n  font-size: 1.6rem;\n`\n\nexport function Speaker(props: Props) {\n  const { i18n } = useTranslation()\n  const { talk, speaker, avatar } = props\n  if (!talk) {\n    return <>???</>\n  }\n  const { uuid, title, titleJa } = talk\n  const { name } = speaker\n\n  if (!uuid || title === \"TBA\") {\n    return (\n      <div>\n        <Avatar image={avatar} alt={name} loading=\"lazy\" />\n        <Title>{enOrJa(i18n)(title, titleJa)}</Title>\n        <Name>{name}</Name>\n      </div>\n    )\n  }\n\n  return (\n    <LinkContainer to={`/talk/${uuid}`}>\n      <Avatar image={avatar} alt={name} loading=\"lazy\" />\n      <Title>{enOrJa(i18n)(title, titleJa)}</Title>\n      <Name>{name}</Name>\n    </LinkContainer>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { Speaker, AvatarType } from \"./Speaker\"\nimport { SpeakerType, TalkType } from \"../data/types\"\n\nexport type Props = {\n  speakers: SpeakerType[]\n  avatars: AvatarType[]\n  talks: TalkType[]\n}\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-column-gap: 60px;\n  grid-row-gap: 60px;\n\n  ${({ theme }) => theme.breakpoints.mobile} {\n    grid-template-columns: repeat(2, 1fr);\n    grid-column-gap: 20px;\n    grid-row-gap: 20px;\n  }\n`\n\nexport function SpeakerList(props: Props) {\n  const { speakers, avatars, talks } = props\n  const talkMap: { [uuid: string]: TalkType } = talks.reduce(\n    (acc, talk) => ({\n      ...acc,\n      [talk.uuid]: talk as TalkType,\n    }),\n    {},\n  )\n  const avatarMap: { [uuid: string]: AvatarType } = avatars.reduce(\n    (acc, avatar) => ({ ...acc, [avatar.uuid]: avatar }),\n    {},\n  )\n  const items = speakers\n    .filter(speaker => {\n      return speaker.presentations.length > 0\n    })\n    .map(speaker => {\n      const talk = talkMap[speaker.presentations[0]]\n      return {\n        speaker,\n        talk,\n        avatar:\n          avatarMap[speaker.uuid] ?? \"/sponsors/\" + talk.sponsorIDs[0] + \".png\",\n      }\n    })\n\n  return (\n    <Container>\n      {items.map(item => {\n        return <Speaker key={item.speaker.uuid} {...item} />\n      })}\n    </Container>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nexport type Props = {\n  children: React.ReactNode\n}\n\nconst Box = styled.h1`\n  text-align: center;\n  margin: 40px 0 60px;\n  font-size: ${({ theme }) => theme.fontSizes.title};\n  text-transform: none;\n  font-family: ${({ theme }) => theme.fonts.header};\n`\n\nexport function Title(props: Props) {\n  const { children } = props\n\n  return <Box>{children}</Box>\n}\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { Layout } from \"../components/Layout\"\nimport { SEO } from \"../components/Seo\"\nimport { Title } from \"../components/Title\"\nimport { SpeakerList } from \"../components/SpeakerList\"\nimport { ResponsiveBox } from \"../components/ResponsiveBox\"\nimport { Breadcrumb } from \"../components/Breadcrumb\"\n\nexport default function SpeakersPage() {\n  const { allSpeakersYaml, allTalksYaml, allFile } = useStaticQuery(graphql`\n    query Speakers {\n      allSpeakersYaml {\n        edges {\n          node {\n            uuid\n            name\n            nameReading\n            biography\n            biographyJa\n            presentations\n          }\n        }\n      }\n      allTalksYaml {\n        edges {\n          node {\n            uuid\n            title\n            titleJa\n            description\n            descriptionJa\n            spokenLanguage\n            slideLanguage\n            presenterName\n            presenterNameReading\n            speakerIDs\n          }\n        }\n      }\n      allFile(filter: { relativePath: { regex: \"/speakers/\" } }) {\n        nodes {\n          name\n          childImageSharp {\n            gatsbyImageData(\n              width: 524\n              height: 524\n              placeholder: BLURRED\n              layout: CONSTRAINED\n            )\n          }\n        }\n      }\n    }\n  `)\n  const { t } = useTranslation()\n  const speakers = allSpeakersYaml.edges.map(({ node }: any) => node)\n  const avatars = allFile.nodes\n    .filter((avatar: any) => avatar.childImageSharp)\n    .map((avatar: any) => ({\n      uuid: avatar.name,\n      ...avatar.childImageSharp.gatsbyImageData,\n    }))\n  const talks = allTalksYaml.edges.map(({ node }: any) => node)\n\n  return (\n    <Layout>\n      <SEO title={t(\"speakers\")} description={t(\"speakers.description\")} />\n      <ResponsiveBox>\n        <Breadcrumb path={[t(\"speakers\")]} />\n        <Title>{t(\"speakers\")}</Title>\n        <SpeakerList speakers={speakers} avatars={avatars} talks={talks} />\n      </ResponsiveBox>\n    </Layout>\n  )\n}\n"],"names":["Box","styled","div","withConfig","displayName","componentId","Text","span","_ref","theme","fonts","header","Breadcrumb","props","path","t","useTranslation","React","Link","to","filter","label","map","key","innerWidth","ResponsiveBox","children","LinkContainer","colors","text","Avatar","Image","Title","h2","_ref2","border","_ref3","Name","p","_ref4","Speaker","i18n","talk","speaker","avatar","uuid","title","titleJa","name","image","alt","loading","enOrJa","Container","breakpoints","mobile","SpeakerList","speakers","avatars","talks","talkMap","reduce","acc","avatarMap","items","presentations","length","_avatarMap$speaker$uu","sponsorIDs","item","Object","assign","h1","fontSizes","SpeakersPage","allSpeakersYaml","allTalksYaml","allFile","useStaticQuery","edges","node","nodes","childImageSharp","gatsbyImageData","Layout","SEO","description"],"sourceRoot":""}